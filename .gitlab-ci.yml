stages:
  - setup
  - build
  - test
  - test extended
  - examples
  - deploy

variables:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  TEST_PATTERN: "methods"

setup environment:
  stage: setup
  script:
    - git submodule update --init --recursive
    - nix-shell --run "yarn"
  artifacts:
    expire_in: 1 week
    paths:
      - submodules
      - node_modules
  tags:
    - deploy

verify:
  stage: build
  dependencies:
    - "setup environment"
  script:
    - nix-shell --run "yarn test:health"
    - nix-shell --run "yarn flow"
    - nix-shell --run "yarn typescript"
    - nix-shell --run "yarn lint"
    - nix-shell --run "yarn test:unit"
  tags:
    - deploy

build:
  stage: build
  dependencies:
    - "setup environment"
  script:
    - nix-shell --run "yarn build:connect"
  artifacts:
    expire_in: 1 week
    paths:
      - build
  tags:
    - deploy

# Deploy to testing environment
deploy test:
  stage: deploy
  except:
    - v8
  variables:
    GIT_STRATEGY: none
  when: manual
  dependencies:
    - build
  environment:
    name: $CI_BUILD_REF_NAME
    url: $BASE_REVIEW_URL/$CI_BUILD_REF_NAME
  before_script: []
  script:
    - echo "Deploy a review app"
    - '[ -z "${DEPLOY_BASE_DIR}" ] && echo "Deploy base dir cannot be empty" && exit 255'
    - env
    - mkdir -p "${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}"
    - echo "Copy dev build to web server ${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}..."
    - rsync --delete -va build/ "${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}/"
  only:
    - branches
  tags:
    - deploy

# Create rollback copy of connect.trezo.io
rollback production copy:
  stage: deploy
  only:
    refs:
      - v8
  when: manual
  variables:
    GIT_STRATEGY: none
  before_script: []
  script:
    - aws s3 sync s3://connect.trezor.io s3://rollback-connect.trezor.io
  tags:
    - deploy

# Deploy release to connect.trezor.io
deploy production:
  stage: deploy
  only:
    refs:
      - v8
  when: manual
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
  before_script: []
  script:
    - ./scripts/s3sync.sh 8
  tags:
    - deploy

# Publish release to npm registry

publish release to npm:
  stage: deploy
  only:
    refs:
      - v8
  when: manual
  dependencies:
    - "setup environment"
  before_script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
    - nix-shell --run "yarn"
  script:
    - nix-shell --run "yarn build:npm && cd ./npm && npm publish"
    - nix-shell --run "yarn build:npm-extended && cd ./npm-extended && npm publish --tag extended"
  after_script:
    - rm ~/.npmrc
  tags:
    - deploy

# Publish beta release to npm registry

publish beta release to npm:
  stage: deploy
  except:
    - v8
  when: manual
  dependencies:
    - "setup environment"
  before_script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
    - nix-shell --run "yarn"
    - nix-shell --run "REMOTE_VERSION=\$(npm show trezor-connect version --tag beta) && node ./scripts/ci-check-version \$REMOTE_VERSION $CI_COMMIT_BRANCH"
  script:
    - nix-shell --run "yarn build:npm-extended && cd ./npm-extended && npm publish --tag beta"
  after_script:
    - rm ~/.npmrc
  tags:
    - deploy

# Test

.jobs:
  parallel:
    matrix:
      - TESTS_INCLUDED_METHODS: "applySettings,applyFlags,getFeatures"
      - TESTS_INCLUDED_METHODS: "signTransaction"
      - TESTS_INCLUDED_METHODS: "getAccountInfo,getAddress,getPublicKey,signMessage,verifyMessage,composeTransaction"
      - TESTS_INCLUDED_METHODS: "stellarGetAddress,stellarSignTransaction"
      - TESTS_INCLUDED_METHODS: "cardanoGetAddress,cardanoGetNativeScriptHash,cardanoGetPublicKey,cardanoSignTransaction"
      - TESTS_INCLUDED_METHODS: "eosGetPublicKey,eosSignTransaction"
      - TESTS_INCLUDED_METHODS: "ethereumGetAddress,ethereumGetPublicKey,ethereumSignMessage,ethereumSignTransaction,ethereumVerifyMessage,ethereumSignTypedData"
      - TESTS_INCLUDED_METHODS: "nemGetAddress,nemSignTransaction"
      - TESTS_INCLUDED_METHODS: "rippleGetAddress,rippleSignTransaction"
      - TESTS_INCLUDED_METHODS: "tezosGetAddress,tezosGetPublicKey"
      - TESTS_INCLUDED_METHODS: "binanceSignTransaction"

.jobs-t1:
  parallel:
    matrix:
      - TESTS_INCLUDED_METHODS: "applySettings,applyFlags,getFeatures"
      - TESTS_INCLUDED_METHODS: "signTransaction"
      - TESTS_INCLUDED_METHODS: "getAccountInfo,getAddress,getPublicKey,signMessage,verifyMessage,composeTransaction"
      - TESTS_INCLUDED_METHODS: "ethereumGetAddress,ethereumGetPublicKey,ethereumSignMessage,ethereumSignTransaction,ethereumVerifyMessage,ethereumSignTypedData"

.jobs-api:
  parallel:
    matrix:
      - TEST_PATTERN: "init"

.test:
  extends: .jobs
  image: registry.gitlab.com/satoshilabs/trezor/trezor-user-env/trezor-user-env:latest
  dependencies:
    - "setup environment"
  variables:
    SDL_VIDEODRIVER: "dummy"
    TESTS_USE_TX_CACHE: "false"
    TESTS_USE_WS_CACHE: "false"
  before_script:
    - nix-shell --run "yarn"
  script:
    - "echo Firmware version: $TESTS_FIRMWARE"
    - /trezor-user-env/run.sh &
    - nix-shell --run "yarn test:integration ${TEST_PATTERN} --coverage true"
  after_script:
    - cp /trezor-user-env/logs/debugging.log trezor-user-env-debugging.log
    - cp /trezor-user-env/logs/emulator_bridge.log tenv-emulator-bridge-debugging.log
  artifacts:
    paths:
      - trezor-user-env-debugging.log
      - tenv-emulator-bridge-debugging.log
    expire_in: 1 week
    when: always

TT latest: 
  extends: .test
  stage: test

API:
  extends: .test
  stage: test
  parallel: !reference [.jobs-api,parallel]
  
.test-nightly:
  extends: .test
  stage: test extended
  only:
    - schedules
  variables:
    TESTS_USE_TX_CACHE: "true"
    TESTS_USE_WS_CACHE: "true"
  # todo: resolve tests flakiness and remove retry option
  retry: 2
 
.test-manual:
  extends: .test
  stage: test extended
  when: manual
  # out of stages order, needs makes jobs available along with "base tests"
  needs: ["setup environment", "verify", "build"]

TT master: 
  extends: .test-nightly
  variables:
    TESTS_FIRMWARE: "2-master"

TT master: 
  extends: .test-manual
  variables:
    TESTS_FIRMWARE: "2-master"

TT 2.2.0: 
  extends: .test-nightly
  # todo: remove delay. according to my observation, the higher number of jobs running concurrently, the higher chance of test failing. are we sure jobs are isolated from each other
  when: delayed
  start_in: 5 minutes
  variables:
    TESTS_FIRMWARE: "2.2.0"

TT 2.2.0: 
  extends: .test-manual
  variables:
    TESTS_FIRMWARE: "2.2.0"

T1 latest: 
  extends: .test-nightly
  # todo: remove delay. according to my observation, the higher number of jobs running concurrently, the higher chance of test failing. are we sure jobs are isolated from each other
  when: delayed
  start_in: 10 minutes
  variables:
    TESTS_FIRMWARE: "1-latest"
  parallel: !reference [.jobs-t1,parallel]

T1 latest: 
  extends: .test-manual
  variables:
    TESTS_FIRMWARE: "1-latest"
  parallel: !reference [.jobs-t1,parallel]

T1 master: 
  extends: .test-nightly
    # todo: remove delay. according to my observation, the higher number of jobs running concurrently, the higher chance of test failing. are we sure jobs are isolated from each other
  when: delayed
  start_in: 15 minutes
  variables:
    TESTS_FIRMWARE: "1-master"
  parallel: !reference [.jobs-t1,parallel]

T1 master: 
  extends: .test-manual
  variables:
    TESTS_FIRMWARE: "1-master"
  parallel: !reference [.jobs-t1,parallel]

# Examples
node:
  image: registry.gitlab.com/satoshilabs/trezor/trezor-user-env/trezor-user-env:latest
  stage: examples
  dependencies:
    - "setup environment"
  variables:
    SDL_VIDEODRIVER: "dummy"
  before_script:
    - nix-shell --run "yarn"
    - nix-shell --run "yarn build:npm-extended"
  script:
    - /trezor-user-env/run.sh &
    - sleep 10
    - nix-shell --run "yarn babel-node ./examples/node/index.js"
