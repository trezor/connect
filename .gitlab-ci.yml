stages:
  - setup
  - build
  - test
  - deploy

setup environment:
  stage: setup
  script:
    - git submodule update --init --recursive
    - nix-shell --run "yarn"
  artifacts:
    expire_in: 1 week
    paths:
      - submodules
      - node_modules
  tags:
    - deploy

verify:
  stage: build
  needs: ["setup environment"]
  dependencies:
    - "setup environment"
  script:
    - nix-shell --run "yarn test:health"
    - nix-shell --run "yarn flow"
    - nix-shell --run "yarn typescript"
    - nix-shell --run "yarn lint"
    - nix-shell --run "yarn test:unit"
  tags:
    - deploy

build:
  stage: build
  needs: ["setup environment"]
  dependencies:
    - "setup environment"
  script:
    - nix-shell --run "yarn build:connect"
  artifacts:
    expire_in: 1 week
    paths:
      - build
  tags:
    - deploy

# Deploy to testing environment
deploy test:
  stage: deploy
  except:
    - v8
  variables:
    GIT_STRATEGY: none
  when: manual
  needs: ["build"]
  dependencies:
    - build
  environment:
    name: $CI_BUILD_REF_NAME
    url: $BASE_REVIEW_URL/$CI_BUILD_REF_NAME
  before_script: []
  script:
    - echo "Deploy a review app"
    - '[ -z "${DEPLOY_BASE_DIR}" ] && echo "Deploy base dir cannot be empty" && exit 255'
    - env
    - mkdir -p "${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}"
    - echo "Copy dev build to web server ${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}..."
    - rsync --delete -va build/ "${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}/"
  only:
    - branches
  tags:
    - deploy

# Create rollback copy of connect.trezo.io
rollback production copy:
  stage: deploy
  only:
    refs:
      - v8
  when: manual
  needs: ["verify"]
  variables:
    GIT_STRATEGY: none
  before_script: []
  script:
    - aws s3 sync s3://connect.trezor.io s3://rollback-connect.trezor.io
  tags:
    - deploy

# Deploy release to connect.trezor.io
deploy production:
  stage: deploy
  only:
    refs:
      - v8
  when: manual
  needs: ["build"]
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
  before_script: []
  script:
    - ./scripts/s3sync.sh 8
  tags:
    - deploy

# Publish release to npm registry

publish release to npm:
  stage: deploy
  only:
    refs:
      - v8
  when: manual
  needs: ["setup environment", "verify"]
  dependencies:
    - "setup environment"
  before_script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
    - nix-shell --run "yarn"
  script:
    - nix-shell --run "yarn build:npm && cd ./npm && npm publish"
    - nix-shell --run "yarn build:npm-extended && cd ./npm-extended && npm publish --tag extended"
  after_script:
    - rm ~/.npmrc
  tags:
    - deploy

# Publish beta release to npm registry

publish beta release to npm:
  stage: deploy
  except:
    - v8
  when: manual
  needs: ["setup environment", "verify"]
  dependencies:
    - "setup environment"
  before_script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
    - nix-shell --run "yarn"
    - nix-shell --run "REMOTE_VERSION=\$(npm show trezor-connect version --tag beta) && node ./scripts/ci-check-version \$REMOTE_VERSION $CI_COMMIT_BRANCH"
  script:
    - nix-shell --run "yarn build:npm-extended && cd ./npm-extended && npm publish --tag beta"
  after_script:
    - rm ~/.npmrc
  tags:
    - deploy

# Test
.test:
  image: registry.gitlab.com/satoshilabs/trezor/trezor-user-env/trezor-user-env:latest
  stage: test
  needs: ["setup environment", "verify"]
  dependencies:
    - "setup environment"
  variables:
    SDL_VIDEODRIVER: "dummy"
    TESTS_FIRMWARE: "2-master"
    TESTS_USE_TX_CACHE: "false"
    TESTS_USE_WS_CACHE: "false"
  before_script:
    - nix-shell --run "yarn"
  script:
    - "echo Firmware version: $TESTS_FIRMWARE"
    - /trezor-user-env/run.sh &
    - nix-shell --run "yarn test:integration --coverage true"

test management:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "applySettings,applyFlags,getFeatures"

test btc sign:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "signTransaction"

test btc others:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "getAccountInfo,getAddress,getPublicKey,signMessage,verifyMessage"

test stellar:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "stellarGetAddress,stellarSignTransaction"

test cardano:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "cardanoGetAddress,cardanoGetNativeScriptHash,cardanoGetPublicKey,cardanoSignTransaction"

test eos:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "eosGetPublicKey,eosSignTransaction"

test eth:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "ethereumGetAddress,ethereumGetPublicKey,ethereumSignMessage,ethereumSignTransaction,ethereumVerifyMessage"

test nem:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "nemGetAddress,nemSignTransaction"

test ripple:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "rippleGetAddress,rippleSignTransaction"

test tezos:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "tezosGetAddress,tezosGetPublicKey"

test binance:
  extends: .test
  variables:
    TESTS_INCLUDED_METHODS: "binanceSignTransaction"
